
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "warbleR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('warbleR')
Loading required package: tuneR
Loading required package: seewave
Loading required package: NatureSounds
Loading required package: knitr
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("auto_detec")
> ### * auto_detec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: auto_detec
> ### Title: 'auto_detec' automatically detects the start and end of
> ###   vocalizations in sound files based on amplitude, duration, and
> ###   frequency range attributes.
> ### Aliases: auto_detec
> 
> ### ** Examples
> 
> {
+   # Save to temporary working directory
+   data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4"))
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+   writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+   writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+   writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
+ 
+   ad <- auto_detec(
+     threshold = 5, ssmooth = 300,
+     bp = c(2, 9), wl = 300, path = tempdir()
+   )
+ }
Warning: This function will be deprecated in future warbleR versions, please look at the ohun package for automatic signal detection functions (https://marce10.github.io/ohun/index.html)
Detecting signals in sound files:
> 
> 
> 
> 
> cleanEx()
> nameEx("by_element_est")
> ### * by_element_est
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: by_element_est
> ### Title: Convert a by-song extended selection table to by-element
> ### Aliases: by_element_est
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
> ##D writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
> ##D writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
> ##D writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
> ##D writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
> ##D 
> ##D # create extended selection table
> ##D by_song_est <- selection_table(lbh_selec_table,
> ##D   path = tempdir(),
> ##D   extended = TRUE, by.song = "song", confirm.extended = FALSE
> ##D )
> ##D 
> ##D # conver o by element
> ##D by_element_est <- by_element_est(by_song_est, mar = 0.05)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("catalog")
> ### * catalog
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: catalog
> ### Title: Create catalogs of vocal signals
> ### Aliases: catalog
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # save sound file examples
> ##D data(list = c("Phae.long1", "Phae.long2","lbh_selec_table"))
> ##D writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav")) 
> ##D writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
> ##D  writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
> ##D  writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
> ##D 
> ##D 
> ##D catalog(X = lbh_selec_table, flim = c(1, 10), nrow = 4, ncol = 2, same.time.scale = T,
> ##D  ovlp = 90, parallel = 1, mar = 0.01, wl = 200, gr = FALSE,
> ##D  orientation = "v", labels = c("sound.files", "selec"), legend = 0, 
> ##D  path = tempdir())
> ##D  
> ##D  #different time scales and tag palette
> ##D catalog(X = lbh_selec_table, flim = c(1, 10), nrow = 4, ncol = 2, same.time.scale = F,
> ##D  ovlp = 90, parallel = 1, mar = 0.01, wl = 200, 
> ##D  orientation = "v",  labels = c("sound.files", "selec"), legend = 0, 
> ##D  tag.pal = list(terrain.colors), 
> ##D  path = tempdir())
> ##D  
> ##D  #adding tags and changing spectro palette
> ##D catalog(X = lbh_selec_table, flim = c(1, 10), nrow = 4, ncol = 2, same.time.scale = F,
> ##D  ovlp = 90, parallel = 1, mar = 0.01, wl = 200, pal = reverse.heat.colors,
> ##D  orientation = "v",  labels = c("sound.files", "selec"), legend = 1, 
> ##D  tag.pal = list(terrain.colors), tags = "sound.files", 
> ##D  path = tempdir())
> ##D 
> ##D  #create a bigger selection table
> ##D  X <- rbind(lbh_selec_table, lbh_selec_table, lbh_selec_table, lbh_selec_table)
> ##D  X <- rbind(X, X)
> ##D  
> ##D  #create some simulated labels
> ##D  X$songtype <- sample(letters[13:15], nrow(X), replace = T)
> ##D  X$indiv <- sample(letters[1:12], nrow(X), replace = T)
> ##D 
> ##D # 12 columns in 5 rows, 2 tags
> ##D catalog(X = X, flim = c(1, 10), nrow = 5, ncol = 12, same.time.scale = F,
> ##D  ovlp = 90, parallel = 1, mar = 0.01, wl = 200, 
> ##D  orientation = "v",  labels = c("sound.files", "selec"), legend = 3, 
> ##D  collevels = seq(-65, 0, 5), tag.pal = list(terrain.colors), tags = c("songtype", "indiv"), 
> ##D  path = tempdir())
> ##D 
> ##D # with legend
> ##D catalog(X = X, flim = c(1, 10), nrow = 5, ncol = 12, same.time.scale = F,
> ##D  ovlp = 90, parallel = 1, mar = 0.01, wl = 200, gr = FALSE,
> ##D  orientation = "v",  labels = c("sound.files", "selec"), legend = 3, 
> ##D  width = 20, collevels = seq(-65, 0, 5), tag.pal = list(terrain.colors),
> ##D   tags = c("songtype", "indiv"), 
> ##D   path = tempdir())
> ##D   
> ##D   # horizontal orientation
> ##D catalog(X = X, flim = c(1, 10), nrow = 5, ncol = 12, same.time.scale = F,
> ##D  ovlp = 90, parallel = 1, mar = 0.01, wl = 200, gr = FALSE,
> ##D  orientation = "h",  labels = c("sound.files", "selec"), legend = 3, 
> ##D  width = 20, collevels = seq(-65, 0, 5), tag.pal = list(terrain.colors),
> ##D   tags = c("songtype", "indiv"), 
> ##D   path = tempdir())
> ##D 
> ##D check this floder
> ##D tempdir()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("catalog2pdf")
> ### * catalog2pdf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: catalog2pdf
> ### Title: Combine 'catalog' images into pdfs
> ### Aliases: catalog2pdf
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # save sound file examples
> ##D data(list = c("Phae.long1", "Phae.long2"))
> ##D writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
> ##D writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
> ##D 
> ##D catalog(X = lbh_selec_table, nrow = 2, ncol = 4)
> ##D 
> ##D # now create single pdf removing jpeg
> ##D catalog2pdf(keep.img = FALSE, path = tempdir())
> ##D 
> ##D # check this floder
> ##D tempdir()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("check_sels")
> ### * check_sels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check_sels
> ### Title: Check selection data frames
> ### Aliases: check_sels
> 
> ### ** Examples
> 
> {
+ # save wav file examples
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "lbh_selec_table"))
+ writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+ writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+ writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+ 
+ check_sels(X = lbh_selec_table, path = tempdir())
+ }
all selections are OK 

> 
> 
> 
> cleanEx()
> nameEx("check_sound_files")
> ### * check_sound_files
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check_sound_files
> ### Title: Check sound files
> ### Aliases: check_sound_files
> 
> ### ** Examples
> 
> {
+ # save wav file examples
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
+ writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+ writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+ writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+ writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
+ 
+ # without selection data frame
+ check_sound_files(path = tempdir())
+ 
+ # with selection data frame
+ check_sound_files(X = lbh_selec_table, path = tempdir())
+ }
All files can be read

All files can be read

smallest number of samples: 2838 (sound file:Phae.long2.wav; selection label: 2)

> 
> 
> 
> cleanEx()
> nameEx("color_spectro")
> ### * color_spectro
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: color_spectro
> ### Title: Highlight spectrogram regions
> ### Aliases: color_spectro
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(list = c("Phae.long1", "lbh_selec_table"))
> ##D writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav")) # save sound files
> ##D 
> ##D # subset selection table
> ##D st <- lbh_selec_table[lbh_selec_table$sound.files == "Phae.long1.wav", ]
> ##D 
> ##D # read wave file as an R object
> ##D sgnl <- tuneR::readWave(file.path(tempdir(), st$sound.files[1]))
> ##D 
> ##D # create color column
> ##D st$colors <- c("red2", "blue", "green")
> ##D 
> ##D # highlight selections
> ##D color_spectro(
> ##D   wave = sgnl, wl = 300, ovlp = 90, flim = c(1, 8.6), collevels = seq(-40, 0, 5),
> ##D   dB = "B", X = st, col.clm = "colors", base.col = "skyblue", t.mar = 0.07, f.mar = 0.1,
> ##D   interactive = NULL
> ##D )
> ##D 
> ##D # interactive (selected manually: you have to select them by clicking on the spectrogram)
> ##D color_spectro(
> ##D   wave = sgnl, wl = 300, ovlp = 90, flim = c(1, 8.6), collevels = seq(-40, 0, 5),
> ##D   dB = "B", col.clm = "colors", t.mar = 0.07, f.mar = 1, interactive = 2
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("compare_methods")
> ### * compare_methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare_methods
> ### Title: Assessing the performance of acoustic distance measurements
> ### Aliases: compare_methods
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Save to temporary working directory
> ##D data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
> ##D writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
> ##D writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
> ##D writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
> ##D writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
> ##D 
> ##D compare_methods(
> ##D   X = lbh_selec_table, flim = c(0, 10), bp = c(0, 10), mar = 0.1, wl = 300,
> ##D   ovlp = 90, res = 200, n = 10, length.out = 30,
> ##D   methods = c("XCORR", "dfDTW"), parallel = 1, it = "jpeg", path = tempdir()
> ##D )
> ##D 
> ##D # remove progress bar
> ##D compare_methods(
> ##D   X = lbh_selec_table, flim = c(0, 10), bp = c(0, 10), mar = 0.1, wl = 300,
> ##D   ovlp = 90, res = 200, n = 10, length.out = 30,
> ##D   methods = c("XCORR", "dfDTW"), parallel = 1, it = "jpeg", pb = FALSE, path = tempdir()
> ##D )
> ##D 
> ##D # check this folder!
> ##D getwd()
> ##D 
> ##D 
> ##D # compare SP and XCORR
> ##D compare_methods(
> ##D   X = lbh_selec_table, flim = c(0, 10), bp = c(0, 10), mar = 0.1, wl = 300,
> ##D   ovlp = 90, res = 200, n = 10, length.out = 30,
> ##D   methods = c("XCORR", "SP"), parallel = 1, it = "jpeg", path = tempdir()
> ##D )
> ##D 
> ##D # compare SP method against dfDTW
> ##D compare_methods(
> ##D   X = lbh_selec_table, flim = c(0, 10), bp = c(0, 10), mar = 0.1, wl = 300,
> ##D   ovlp = 90, res = 200, n = 10, length.out = 30,
> ##D   methods = c("dfDTW", "SP"), parallel = 1, it = "jpeg",
> ##D   path = tempdir()
> ##D )
> ##D 
> ##D # alternatively we can provide our own SP matrix
> ##D Y <- spectro_analysis(lbh_selec_table, path = tempdir())
> ##D 
> ##D # selec a subset of variables
> ##D Y <- Y[, 1:7]
> ##D 
> ##D # PCA
> ##D Y <- prcomp(Y[, 3:ncol(Y)])$x
> ##D 
> ##D # add sound files and selec columns
> ##D Y <- data.frame(lbh_selec_table[, c(1, 3)], Y[, 1:2])
> ##D 
> ##D compare_methods(
> ##D   X = lbh_selec_table, methods = c("dfDTW"), custom1 = Y,
> ##D   path = tempdir()
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("consolidate")
> ### * consolidate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: consolidate
> ### Title: Consolidate (sound) files into a single directory
> ### Aliases: consolidate
> 
> ### ** Examples
> 
> {
+ # save wav file examples
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
+ 
+ # create first folder with 2 sound files
+ dir.create(file.path(tempdir(), "folder1"))
+ writeWave(Phae.long1, file.path(tempdir(), "folder1", "Phae.long1.wav"))
+ writeWave(Phae.long2, file.path(tempdir(), "folder1", "Phae.long2.wav"))
+ 
+ # create second folder with 2 sound files
+ dir.create(file.path(tempdir(), "folder2"))
+ writeWave(Phae.long3, file.path(tempdir(), "folder2", "Phae.long3.wav"))
+ writeWave(Phae.long4, file.path(tempdir(), "folder2", "Phae.long4.wav"))
+ 
+ # consolidate in a single folder
+ # consolidate(path = tempdir(), dest.path = tempdir())
+ 
+ # check this folder
+ tempdir()
+ }
[1] "/tmp/RtmpOHyMGh"
> 
> 
> 
> 
> cleanEx()
> nameEx("cross_correlation")
> ### * cross_correlation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cross_correlation
> ### Title: Time-frequency cross-correlation
> ### Aliases: cross_correlation
> 
> ### ** Examples
> 
> {
+   # load data
+   data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
+ 
+   # save sound files
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+   writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+   writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+   writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
+ 
+   # run cross correlation on spectrograms (SPCC)
+   xcor <- cross_correlation(X = lbh_selec_table, wl = 300, ovlp = 90, path = tempdir())
+ 
+   # run cross correlation on Mel cepstral coefficients (mfccs)
+   xcor <- cross_correlation(
+     X = lbh_selec_table, wl = 300, ovlp = 90, path = tempdir(),
+     type = "mfcc"
+   )
+ 
+   # using the 'compare.matrix' argument to specify pairwise comparisons
+   # create matrix with ID of signals to compare
+   cmp.mt <- cbind(
+     paste(lbh_selec_table$sound.files[1:10], lbh_selec_table$selec[1:10], sep = "-"),
+     paste(lbh_selec_table$sound.files[2:11], lbh_selec_table$selec[2:11], sep = "-")
+   )
+ 
+   # run cross-correlation on the selected pairwise comparisongs
+   xcor <- cross_correlation(
+     X = lbh_selec_table, compare.matrix = cmp.mt,
+     wl = 300, ovlp = 90, path = tempdir()
+   )
+ }
creating spectrogram matrices (step 1 of 2):
running cross-correlation (step 2 of 2):
creating spectrogram matrices (step 1 of 2):
running cross-correlation (step 2 of 2):
Warning: The use of this function for signal detection (with 'compare.matrix') will be deprecated in future warbleR versions, please look at the ohun package for automatic signal detection functions (https://marce10.github.io/ohun/index.html)
running cross-correlation (step 1 of 1):
> 
> 
> 
> cleanEx()
> nameEx("cut_sels")
> ### * cut_sels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cut_sels
> ### Title: Cut selections into individual sound files
> ### Aliases: cut_sels
> ### Keywords: internal
> 
> ### ** Examples
> 
> {
+ # save wav file examples
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
+ writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+ writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+ writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+ writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
+ 
+ # cut selections
+ cut_sels(lbh_selec_table, path = tempdir())
+ 
+ #check this folder!!
+ tempdir()
+ }
[1] "/tmp/RtmpOHyMGh"
> 
> 
> 
> 
> cleanEx()
> nameEx("duration_sound_files")
> ### * duration_sound_files
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: duration_sound_files
> ### Title: Measure the duration of sound files
> ### Aliases: duration_sound_files
> 
> ### ** Examples
> 
> {
+   data(list = c("Phae.long1", "Phae.long2", "Phae.long3"))
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+   writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+   writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+ 
+   duration_sound_files(path = tempdir())
+ }
        sound.files  duration
1  Phae.long1-1.wav 0.2730667
2  Phae.long1-2.wav 0.2630667
3  Phae.long1-3.wav 0.2749333
4    Phae.long1.wav 2.5000444
5  Phae.long2-1.wav 0.2325778
6  Phae.long2-2.wav 0.2261333
7    Phae.long2.wav 1.7000444
8  Phae.long3-1.wav 0.2312444
9  Phae.long3-2.wav 0.2301778
10 Phae.long3-3.wav 0.2312000
11   Phae.long3.wav 2.2000000
12 Phae.long4-1.wav 0.2454222
13 Phae.long4-2.wav 0.2441778
14 Phae.long4-3.wav 0.2451111
15   Phae.long4.wav 3.2000000
> 
> 
> 
> 
> cleanEx()
> nameEx("envelope")
> ### * envelope
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: envelope
> ### Title: Calculates the absolute amplitude envelope
> ### Aliases: envelope
> 
> ### ** Examples
> 
> {
+ data(tico)
+ 
+ amp_env <- envelope(tico@left, ssmooth = 100)
+ }
> 
> 
> 
> cleanEx()
> nameEx("filter_sels")
> ### * filter_sels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: filter_sels
> ### Title: Subset selection data frames based on manually filtered image
> ###   files
> ### Aliases: filter_sels
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # save wav file examples
> ##D data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "lbh_selec_table"))
> ##D writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
> ##D writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
> ##D writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
> ##D 
> ##D spectrograms(lbh_selec_table,
> ##D   flim = c(0, 11), inner.mar = c(4, 4.5, 2, 1), outer.mar = c(4, 2, 2, 1),
> ##D   picsize = 2, res = 300, cexlab = 2, mar = 0.05, wl = 300, path = tempdir()
> ##D )
> ##D 
> ##D # go to the working directory (tempdir()) and delete some images
> ##D 
> ##D # filter selection data frame
> ##D fmloc <- filter_sels(X = lbh_selec_table, path = tempdir())
> ##D 
> ##D # this data frame does not have the selections corresponding to the images that were deleted
> ##D fmloc
> ##D 
> ##D # now using lspec images
> ##D full_spectrograms(
> ##D   sxrow = 2, rows = 8, pal = reverse.heat.colors, wl = 300, ovlp = 10,
> ##D   path = tempdir()
> ##D )
> ##D 
> ##D # go to the working directory (tempdir()) and delete lspec
> ##D # images (the ones with several rows of spectrograms)
> ##D 
> ##D # filter selection data frame
> ##D fmloc2 <- filter_sels(
> ##D   X = lbh_selec_table, lspec = TRUE,
> ##D   path = tempdir()
> ##D )
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("find_clipping")
> ### * find_clipping
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: find_clipping
> ### Title: Find clipped selections
> ### Aliases: find_clipping
> 
> ### ** Examples
> 
> {
+   # load data
+   data(list = c("Phae.long1", "Phae.long2", "lbh_selec_table"))
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav")) # save sound files
+   writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+ 
+   find_clipping(X = lbh_selec_table[1:5, ], path = tempdir())
+ }
     sound.files selec prop.clipped
1 Phae.long1.wav     1 0.0000000000
2 Phae.long1.wav     2 0.0005451077
3 Phae.long1.wav     3 0.0000000000
4 Phae.long2.wav     1 0.0000000000
5 Phae.long2.wav     2 0.0000000000
> 
> 
> 
> cleanEx()
> nameEx("find_peaks")
> ### * find_peaks
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: find_peaks
> ### Title: Find cross-correlation peaks
> ### Aliases: find_peaks
> 
> ### ** Examples
> 
> {
+   # load data
+   data(list = c("Phae.long4", "Phae.long2", "lbh_selec_table2", "comp_matrix"))
+ 
+   # save sound files
+   writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
+   writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+ 
+   # run cross-correlation
+   xc.output <- cross_correlation(
+     X = lbh_selec_table2, output = "list",
+     compare.matrix = comp_matrix, path = tempdir()
+   )
+ 
+   # find peaks
+   pks <- find_peaks(xc.output = xc.output, path = tempdir())
+ }
Warning: The use of this function for signal detection (with 'compare.matrix') will be deprecated in future warbleR versions, please look at the ohun package for automatic signal detection functions (https://marce10.github.io/ohun/index.html)
running cross-correlation (step 1 of 1):
Warning: This function will be deprecated in future warbleR versions, please look at the ohun package for automatic signal detection functions (https://marce10.github.io/ohun/index.html)
> 
> 
> 
> cleanEx()
> nameEx("fix_extended_selection_table")
> ### * fix_extended_selection_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fix_extended_selection_table
> ### Title: Fix extended selection tables
> ### Aliases: fix_extended_selection_table
> 
> ### ** Examples
> 
> {
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
+ 
+ writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+ writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+ writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+ writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
+ 
+ # create extended selection table
+ ext_st <- selection_table(lbh_selec_table, extended = TRUE,
+ path = tempdir())
+ 
+ # remove attributes
+ st <- as.data.frame(ext_st)
+ 
+ # check class
+ class(st)
+ 
+ # fix selection table
+ st <- fix_extended_selection_table(X = st, Y = ext_st)
+ 
+ # check class
+ class(st)
+ }
checking selections (step 1 of 2):
saving wave objects into extended selection table (step 2 of 2):
[1] "extended_selection_table" "data.frame"              
> 
> 
> 
> cleanEx()
> nameEx("fix_wavs")
> ### * fix_wavs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fix_wavs
> ### Title: Fix .wav files to allow importing them into R
> ### Aliases: fix_wavs
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Load example files and save to temporary working directory
> ##D #
> ##D 
> ##D # check this folder
> ##D tempdir()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("freq_DTW")
> ### * freq_DTW
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: freq_DTW
> ### Title: Acoustic dissimilarity using dynamic time warping on dominant
> ###   frequency contours
> ### Aliases: freq_DTW
> 
> ### ** Examples
> 
> {
+   # load data
+   data(list = c("Phae.long1", "Phae.long2", "lbh_selec_table"))
+   writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav")) # save sound files
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+ 
+   # dominant frequency
+   freq_DTW(lbh_selec_table,
+     length.out = 30, flim = c(1, 12), bp = c(2, 9),
+     wl = 300, path = tempdir()
+   )
+ 
+   # fundamental frequency
+   freq_DTW(lbh_selec_table,
+     type = "fundamental", length.out = 30, flim = c(1, 12),
+     bp = c(2, 9), wl = 300, path = tempdir()
+   )
+ }
measuring dominant frequency contours (step 1 of 2): 

Creating spectrograms overlaid with fundamental frequency measurements:
calculating DTW distances (step 2 of 2, no progress bar):
measuring dominant frequency contours (step 1 of 2): 

Creating spectrograms overlaid with fundamental frequency measurements:
calculating DTW distances (step 2 of 2, no progress bar):
                 Phae.long1.wav-1 Phae.long1.wav-2 Phae.long1.wav-3
Phae.long1.wav-1           0.0000          20.2601          20.2518
Phae.long1.wav-2          20.2601           0.0000          13.2831
Phae.long1.wav-3          20.2518          13.2831           0.0000
Phae.long2.wav-1          15.4428          89.3132          83.3434
Phae.long2.wav-2          17.7108          84.4165          75.8621
Phae.long3.wav-1          35.7880         105.3692          93.4466
Phae.long3.wav-2          12.7952          89.8322          81.4853
Phae.long3.wav-3          33.2880          99.5629          86.9659
Phae.long4.wav-1          20.6536          23.4967          31.0400
Phae.long4.wav-2          20.3148          22.7303          29.2321
Phae.long4.wav-3          19.8954          21.8002          28.3667
                 Phae.long2.wav-1 Phae.long2.wav-2 Phae.long3.wav-1
Phae.long1.wav-1          15.4428          17.7108          35.7880
Phae.long1.wav-2          89.3132          84.4165         105.3692
Phae.long1.wav-3          83.3434          75.8621          93.4466
Phae.long2.wav-1           0.0000          11.0944           9.0332
Phae.long2.wav-2          11.0944           0.0000          25.5835
Phae.long3.wav-1           9.0332          25.5835           0.0000
Phae.long3.wav-2           4.7227          12.1370           4.6336
Phae.long3.wav-3           8.2250          16.2625           3.5236
Phae.long4.wav-1          49.0280          42.5728          64.5342
Phae.long4.wav-2          50.2424          42.5583          63.3510
Phae.long4.wav-3          50.7279          41.8545          63.9772
                 Phae.long3.wav-2 Phae.long3.wav-3 Phae.long4.wav-1
Phae.long1.wav-1          12.7952          33.2880          20.6536
Phae.long1.wav-2          89.8322          99.5629          23.4967
Phae.long1.wav-3          81.4853          86.9659          31.0400
Phae.long2.wav-1           4.7227           8.2250          49.0280
Phae.long2.wav-2          12.1370          16.2625          42.5728
Phae.long3.wav-1           4.6336           3.5236          64.5342
Phae.long3.wav-2           0.0000           8.1572          53.3453
Phae.long3.wav-3           8.1572           0.0000          64.8988
Phae.long4.wav-1          53.3453          64.8988           0.0000
Phae.long4.wav-2          53.7884          64.0806           1.8670
Phae.long4.wav-3          53.8636          65.3580           2.8345
                 Phae.long4.wav-2 Phae.long4.wav-3
Phae.long1.wav-1          20.3148          19.8954
Phae.long1.wav-2          22.7303          21.8002
Phae.long1.wav-3          29.2321          28.3667
Phae.long2.wav-1          50.2424          50.7279
Phae.long2.wav-2          42.5583          41.8545
Phae.long3.wav-1          63.3510          63.9772
Phae.long3.wav-2          53.7884          53.8636
Phae.long3.wav-3          64.0806          65.3580
Phae.long4.wav-1           1.8670           2.8345
Phae.long4.wav-2           0.0000           1.4648
Phae.long4.wav-3           1.4648           0.0000
> 
> 
> 
> 
> cleanEx()
> nameEx("freq_range")
> ### * freq_range
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: freq_range
> ### Title: Detect frequency range iteratively
> ### Aliases: freq_range
> 
> ### ** Examples
> 
> {
+   data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+   writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+   writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+   writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
+ 
+   freq_range(
+     X = lbh_selec_table, wl = 112, fsmooth = 1, threshold = 13, widths = c(4, 1),
+     img = TRUE, pb = TRUE, it = "tiff", line = TRUE, mar = 0.1, bp = c(1, 10.5),
+     flim = c(0, 11), path = tempdir()
+   )
+ }
      sound.files channel selec     start       end bottom.freq  top.freq
1  Phae.long1.wav       1     1 1.1693549 1.3423884    3.149291  8.782169
2  Phae.long1.wav       1     2 2.1584085 2.3214565    3.149291  8.782169
3  Phae.long1.wav       1     3 0.3433366 0.5182553    2.932642  8.998818
4  Phae.long2.wav       1     1 0.1595983 0.2921692    3.365940 10.298713
5  Phae.long2.wav       1     2 1.4570585 1.5832087    4.015888  8.998818
6  Phae.long3.wav       1     1 0.6265520 0.7577715    4.882484  9.215467
7  Phae.long3.wav       1     2 1.9742132 2.1043921    4.665835  8.998818
8  Phae.long3.wav       1     3 0.1233643 0.2545812    4.665835  9.215467
9  Phae.long4.wav       1     1 1.5168116 1.6622365    2.715993  8.998818
10 Phae.long4.wav       1     2 2.9326920 3.0768784    2.715993  9.432117
11 Phae.long4.wav       1     3 0.1453977 0.2904966    2.499343  8.998818
> 
> 
> 
> 
> cleanEx()
> nameEx("freq_range_detec")
> ### * freq_range_detec
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: freq_range_detec
> ### Title: Detect frequency range on wave objects
> ### Aliases: freq_range_detec
> 
> ### ** Examples
> 
> {
+   data(tico)
+   freq_range_detec(
+     wave = tico, wl = 512, fsmooth = 0.01, threshold = 1, bp = c(2, 8),
+     widths = c(4, 2)
+   )
+ 
+   data(sheep)
+   freq_range_detec(
+     wave = sheep, wl = 512, fsmooth = 0.2, threshold = 50, bp = c(0.3, 1),
+     flim = c(0, 1.5), pal = reverse.heat.colors, main = "sheep"
+   )
+ }
  bottom.freq  top.freq
1    0.467689 0.6808449
> 
> 
> 
> 
> cleanEx()
> nameEx("freq_ts")
> ### * freq_ts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: freq_ts
> ### Title: Extract frequency contours as time series
> ### Aliases: freq_ts
> 
> ### ** Examples
> 
> {
+ #load data
+ data(list = c("Phae.long1", "Phae.long2","lbh_selec_table"))
+ writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav")) #save sound files
+ writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav")) #save sound files
+ 
+ # run function with dominant frequency
+ freq_ts(X = lbh_selec_table, length.out = 30, flim = c(1, 12), bp = c(2, 9),
+ wl = 300, pb = FALSE, path = tempdir())
+ 
+ # note a NA in the row 4 column 3 (dfreq-1)
+ # this can be removed by clipping edges (removing NAs at the start and/or end
+ # when no freq was detected)
+ 
+ freq_ts(X = lbh_selec_table, length.out = 30, flim = c(1, 12), bp = c(2, 9),
+ wl = 300, pb = FALSE, clip.edges = TRUE, path = tempdir())
+ 
+ # run function with fundamental frequency
+ freq_ts(lbh_selec_table, type = "fundamental", length.out = 50,
+ flim = c(1, 12),  bp = c(2, 9), wl = 300, path = tempdir())
+ 
+ # run function with spectral entropy
+ # without clip edges
+ freq_ts(X = lbh_selec_table, type = "entropy", threshold = 10,
+ clip.edges = FALSE, length.out = 10, sp.en.range = c(-25, 10), path = tempdir(),
+  img = FALSE)
+ 
+ # with clip edges and length.out 10
+ freq_ts(X = lbh_selec_table, type = "entropy", threshold = 10, bp = c(2, 12),
+ clip.edges = TRUE, length.out = 10, path = tempdir(), img = FALSE)
+ }
Creating spectrograms overlaid with fundamental frequency measurements:
Measuring fundamental frequency:
Measuring fundamental frequency:
      sound.files selec ffreq-1 ffreq-2 ffreq-3 ffreq-4 ffreq-5 ffreq-6 ffreq-7
1  Phae.long1.wav     1  0.8954  0.8428  0.8594  0.8910  0.8402  0.8801  0.8608
2  Phae.long1.wav     2  0.9015  0.8020  0.8867  0.9032  0.8525  0.8418  0.9016
3  Phae.long1.wav     3  0.9453  0.8812  0.8756  0.9307  0.8591  0.8781  0.9305
4  Phae.long2.wav     1  0.9292  0.8915  0.9211  0.9203  0.8966  0.8790  0.8832
5  Phae.long2.wav     2  0.9200  0.9000  0.9225  0.9245  0.8980  0.8786  0.8748
6  Phae.long3.wav     1  0.9317  0.9047  0.8522  0.8797  0.8587  0.8638  0.8494
7  Phae.long3.wav     2  0.9325  0.9040  0.8836  0.8730  0.8540  0.8670  0.8633
8  Phae.long3.wav     3  0.9161  0.9012  0.8321  0.8720  0.8539  0.8622  0.8657
9  Phae.long4.wav     1  0.9245  0.8420  0.8154  0.8248  0.8346  0.8837  0.8812
10 Phae.long4.wav     2  0.9309  0.8351  0.8344  0.8342  0.8491  0.9000  0.8446
11 Phae.long4.wav     3  0.9489  0.8281  0.8178  0.8389  0.8546  0.8864  0.8680
   ffreq-8 ffreq-9 ffreq-10
1   0.7787  0.8262   0.9335
2   0.7977  0.8135   0.9227
3   0.7821  0.8256   0.8622
4   0.8718  0.8937   0.9275
5   0.8774  0.8726   0.9095
6   0.8543  0.8618   0.9335
7   0.8450  0.8472   0.8607
8   0.8406  0.8502   0.8941
9   0.7762  0.8041   0.9012
10  0.7699  0.8185   0.9032
11  0.8041  0.8307   0.9120
> 
> 
> 
> cleanEx()
> nameEx("full_spectrogram2pdf")
> ### * full_spectrogram2pdf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: full_spectrogram2pdf
> ### Title: 'full_spectrogram2pdf' combines 'full_spectrograms' images in
> ###   .jpeg format to a single pdf file.
> ### Aliases: full_spectrogram2pdf
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # save sound file examples
> ##D data(list = c("Phae.long1", "Phae.long2"))
> ##D writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
> ##D writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
> ##D 
> ##D full_spectrograms(
> ##D   sxrow = 2, rows = 8, pal = reverse.heat.colors, wl = 300,
> ##D   it = "jpeg", path = tempdir()
> ##D )
> ##D 
> ##D # now create single pdf removing jpeg
> ##D full_spectrogram2pdf(keep.img = FALSE, path = tempdir())
> ##D 
> ##D # check this floder
> ##D tempdir()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("full_spectrograms")
> ### * full_spectrograms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: full_spectrograms
> ### Title: Create long spectrograms of entire sound files
> ### Aliases: full_spectrograms
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # save sound file examples to temporary working directory
> ##D data(list = c("Phae.long1", "Phae.long2", "lbh_selec_table"))
> ##D writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
> ##D writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
> ##D 
> ##D full_spectrograms(
> ##D   sxrow = 2, rows = 8, pal = reverse.heat.colors, wl = 300,
> ##D   path = tempdir()
> ##D )
> ##D 
> ##D # including selections
> ##D full_spectrograms(
> ##D   sxrow = 2, rows = 8, X = lbh_selec_table,
> ##D   pal = reverse.heat.colors, overwrite = TRUE, wl = 300, path = tempdir()
> ##D )
> ##D 
> ##D # check this floder
> ##D # tempdir()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("gaps")
> ### * gaps
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gaps
> ### Title: Gap duration
> ### Aliases: gaps
> 
> ### ** Examples
> 
> {
+ # get warbleR sound file examples
+ data(list = "lbh_selec_table")
+ 
+ # get gaps
+ gaps(X = lbh_selec_table)
+ }
      sound.files channel selec     start       end bottom.freq  top.freq
1  Phae.long1.wav       1     1 1.1693549 1.3423884    2.220105  8.604378
2  Phae.long1.wav       1     2 2.1584085 2.3214565    2.169437  8.807053
3  Phae.long1.wav       1     3 0.3433366 0.5182553    2.218294  8.756604
4  Phae.long2.wav       1     1 0.1595983 0.2921692    2.316862  8.822316
5  Phae.long2.wav       1     2 1.4570585 1.5832087    2.284006  8.888027
6  Phae.long3.wav       1     1 0.6265520 0.7577715    3.006834  8.822316
7  Phae.long3.wav       1     2 1.9742132 2.1043921    2.776843  8.888027
8  Phae.long3.wav       1     3 0.1233643 0.2545812    2.316862  9.315153
9  Phae.long4.wav       1     1 1.5168116 1.6622365    2.513997  9.216586
10 Phae.long4.wav       1     2 2.9326920 3.0768784    2.579708 10.235116
11 Phae.long4.wav       1     3 0.1453977 0.2904966    2.579708  9.742279
        gaps
1  0.8160201
2         NA
3  0.6510996
4  1.1648893
5         NA
6  1.2164417
7         NA
8  0.3719707
9  1.2704555
10        NA
11 1.2263150
> 
> 
> 
> 
> cleanEx()
> nameEx("image_to_wave")
> ### * image_to_wave
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: image_to_wave
> ### Title: Convert images into wave objects
> ### Aliases: image_to_wave
> 
> ### ** Examples
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("inflections")
> ### * inflections
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: inflections
> ### Title: Count number of inflections in a frequency contour
> ### Aliases: inflections
> 
> ### ** Examples
> 
> {
+ # get warbleR sound file examples
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
+ writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+ writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+ writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+ writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
+ 
+ # measure frequency contours
+ dom.freq.ts <- freq_ts(X = lbh_selec_table, path = tempdir())
+ 
+ # get number of inflections
+ inflections(X = dom.freq.ts)
+ }
Creating spectrograms overlaid with fundamental frequency measurements:
      sound.files selec inflections
1  Phae.long1.wav     1           6
2  Phae.long1.wav     2           7
3  Phae.long1.wav     3           7
4  Phae.long2.wav     1           9
5  Phae.long2.wav     2           6
6  Phae.long3.wav     1           9
7  Phae.long3.wav     2           5
8  Phae.long3.wav     3           6
9  Phae.long4.wav     1           3
10 Phae.long4.wav     2           3
11 Phae.long4.wav     3           3
> 
> 
> 
> 
> cleanEx()
> nameEx("info_sound_files")
> ### * info_sound_files
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: info_sound_files
> ### Title: Get sound file parameter information
> ### Aliases: info_sound_files
> 
> ### ** Examples
> 
> {
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
+ writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+ writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+ writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+ writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
+ 
+ #get info
+ info_sound_files(path = tempdir())
+ }
        sound.files  duration sample.rate channels bits wav.size samples
1  Phae.long1-1.wav 0.2730667        22.5        1   16 0.012332    6144
2  Phae.long1-2.wav 0.2630667        22.5        1   16 0.011882    5919
3  Phae.long1-3.wav 0.2749333        22.5        1   16 0.012416    6186
4    Phae.long1.wav 2.5000444        22.5        1   16 0.112582   56251
5  Phae.long2-1.wav 0.2325778        22.5        1   16 0.010510    5233
6  Phae.long2-2.wav 0.2261333        22.5        1   16 0.010220    5088
7    Phae.long2.wav 1.7000444        22.5        1   16 0.076582   38251
8  Phae.long3-1.wav 0.2312444        22.5        1   16 0.010450    5203
9  Phae.long3-2.wav 0.2301778        22.5        1   16 0.010402    5179
10 Phae.long3-3.wav 0.2312000        22.5        1   16 0.010448    5202
11   Phae.long3.wav 2.2000000        22.5        1   16 0.099080   49500
12 Phae.long4-1.wav 0.2454222        22.5        1   16 0.011088    5522
13 Phae.long4-2.wav 0.2441778        22.5        1   16 0.011032    5494
14 Phae.long4-3.wav 0.2451111        22.5        1   16 0.011074    5515
15   Phae.long4.wav 3.2000000        22.5        1   16 0.144080   72000
> 
> 
> 
> 
> cleanEx()
> nameEx("is_extended_selection_table")
> ### * is_extended_selection_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_extended_selection_table
> ### Title: Class 'extended_selection_table': selection table containing
> ###   wave objects
> ### Aliases: is_extended_selection_table
> 
> ### ** Examples
> 
> {
+   data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
+ 
+   is_extended_selection_table(lbh_selec_table)
+ 
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+   writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+   writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+   writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
+ 
+   st <- selection_table(lbh_selec_table,
+     extended = TRUE,
+     path = tempdir()
+   )
+ 
+   is_extended_selection_table(st)
+ 
+   class(st)
+ }
checking selections (step 1 of 2):
saving wave objects into extended selection table (step 2 of 2):
[1] "extended_selection_table" "data.frame"              
> 
> 
> 
> cleanEx()
> nameEx("is_selection_table")
> ### * is_selection_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: is_selection_table
> ### Title: Class 'selection_table': double-checked frequency/time
> ###   coordinates of selections
> ### Aliases: is_selection_table
> 
> ### ** Examples
> 
> {
+   # load data
+   data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
+ 
+   is_selection_table(lbh_selec_table)
+ 
+   # save wave files in temporary directory
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+   writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+   writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+   writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
+ 
+   st <- selection_table(lbh_selec_table, path = tempdir())
+ 
+   is_selection_table(st)
+ 
+   class(st)
+ }
checking selections (step 1 of 1):
[1] "selection_table" "data.frame"     
> 
> 
> 
> cleanEx()
> nameEx("map_xc")
> ### * map_xc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: map_xc
> ### Title: Maps of 'Xeno-Canto' recordings by species
> ### Aliases: map_xc
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # search in xeno-canto
> ##D X <- query_xc("Phaethornis anthophilus", download = FALSE)
> ##D 
> ##D # create image in R graphic device
> ##D map_xc(X, img = FALSE)
> ##D 
> ##D # create leaflet map
> ##D map_xc(X, leaflet.map = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("mfcc_stats")
> ### * mfcc_stats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mfcc_stats
> ### Title: Calculate descriptive statistics on Mel-frequency cepstral
> ###   coefficients
> ### Aliases: mfcc_stats
> 
> ### ** Examples
> 
> {
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
+ writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+ writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+ writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+ writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
+ 
+ # run function
+ mel_st <- mfcc_stats(X = lbh_selec_table, pb = FALSE, path = tempdir())
+ 
+ head(mel_st)
+ 
+ # measure 12 coefficients
+ mel_st12 <- mfcc_stats(X = lbh_selec_table, numcep = 12, pb = FALSE, path = tempdir())
+ 
+  head(mel_st)
+ }
     sound.files selec   min.cc1    min.cc2   min.cc3    min.cc4    min.cc5
1 Phae.long1.wav     1  97.41710  -9.741738 -11.32636 -2.4775313 -16.442584
2 Phae.long1.wav     2 103.66298 -11.204330 -13.11395 -5.1566762 -16.876461
3 Phae.long1.wav     3 101.56633 -10.796311 -12.12637 -3.9241991 -15.481162
4 Phae.long2.wav     1  90.35586 -17.738353 -15.98023 -0.3796791  -9.827981
5 Phae.long2.wav     2  94.59037 -15.337203 -15.04966 -0.8982095 -11.579024
6 Phae.long3.wav     1  83.58712 -16.166409 -11.60570  1.7900544 -13.428846
     min.cc6   min.cc7    min.cc8     min.cc9  min.cc10   min.cc11   min.cc12
1 -12.669396 -25.51122 -16.122035 -21.1652585 -26.85733  -8.311928 -11.161755
2 -17.495990 -25.70540 -14.485720 -14.9742115 -30.10690  -7.252546 -13.750444
3 -12.494062 -25.11734 -15.979317 -14.6357577 -34.17262 -10.433532  -6.513314
4 -12.748253 -15.83535  -5.149791  -6.2990882 -13.84780  -7.544004  -4.810362
5 -10.828286 -16.90564  -3.682015  -4.8593790 -16.72003  -8.594043  -5.992594
6  -1.788067 -10.02436  -4.227750   0.7438716 -14.48855  -6.704159  -5.681910
    min.cc13  min.cc14   min.cc15   min.cc16   min.cc17   min.cc18   min.cc19
1 -10.893999 -6.548138  -6.228469 -12.351283 -10.011899 -14.210023 -10.674114
2  -7.469322 -7.517244 -15.924519  -7.058725 -12.643605 -10.448158  -5.083385
3 -10.428165 -2.100663 -10.343367 -16.166685 -12.808690 -10.431413  -2.289366
4  -5.963805 -6.319496  -8.933051  -6.763212  -1.182565  -6.149335  -9.457490
5 -12.106991 -6.543729  -4.679565  -3.715462  -8.811456  -6.970448  -4.089950
6  -9.431567 -9.134731  -5.153216  -4.322798  -4.878103  -5.830261 -20.224515
    min.cc20   min.cc21  min.cc22   min.cc23   min.cc24   min.cc25  max.cc1
1 -14.936022 -14.660531 -1.831284  -7.074403 -10.602284 -15.498981 123.8829
2 -14.862029 -10.599017 -4.799863 -15.609107 -11.213116 -13.257737 121.7936
3  -8.575396  -6.649396 -5.371442 -11.981505  -5.868671 -13.167830 115.8979
4  -5.379245  -3.139821 -6.112165  -1.469666  -4.517338  -8.295976 106.4477
5  -6.062614  -7.508700 -7.220562  -8.242488  -6.971534  -3.505703 110.4075
6  -4.753631  -6.782422 -6.012380 -12.781620  -8.859711 -14.718285 101.1518
     max.cc2   max.cc3   max.cc4  max.cc5   max.cc6   max.cc7   max.cc8
1  -5.471136  1.604269 13.207769 3.765825 18.400812 14.693230 13.396234
2  -5.916305  0.798860 12.415208 7.577028 19.227664 13.613360 10.935493
3  -5.011725  1.503675  9.933779 7.834471 21.543872 14.126354 13.235474
4  -7.399087 -3.281254 12.512596 1.169290 11.551683  7.105545  7.710989
5  -5.262125 -4.712893 11.423114 3.675929  9.407848  6.781409  4.386000
6 -10.734089  2.179903 11.501854 0.127160 11.620112  7.747183  2.748573
    max.cc9  max.cc10  max.cc11  max.cc12  max.cc13  max.cc14  max.cc15
1 11.950669  4.715892 18.462866  6.651267  7.989516 13.994428  9.666043
2 11.703480 18.517115 13.460480  7.254551  5.505258  9.559330  7.031169
3  7.225735 11.434075 18.722485 10.857621 13.911743 14.360009 12.381654
4  5.166011  6.555404 11.793875  4.035566  5.455683  4.812108  7.472272
5  9.138265  6.959043  3.078486  2.770936  3.262478  6.498858 10.700772
6  9.273600  2.210349  3.499552  5.036030  2.578108  3.846708  4.236219
   max.cc16 max.cc17  max.cc18  max.cc19  max.cc20   max.cc21 max.cc22
1 23.755963 6.789029 18.622725 22.773468 10.710674  8.4029593 6.373672
2 27.728741 6.262405 21.131985 22.298373 12.723599  9.5721075 3.267168
3 16.908047 7.459304 11.839398 16.756546 12.316496  8.3001695 6.204872
4  8.823517 6.556143  7.342826  4.316081  9.776778  6.2031408 4.659367
5 20.876774 4.853740  4.382839  8.979047  8.117146  0.6202709 3.662607
6  3.270320 3.448574  4.240012  5.379075  9.291310 12.5054848 5.635668
   max.cc23  max.cc24  max.cc25 median.cc1 median.cc2 median.cc3 median.cc4
1  9.994031 15.818974  8.657913  113.83520  -8.026102  -2.871619   4.353283
2 15.562221  7.111506 15.096408  116.79498  -8.194719  -3.999071   5.900533
3 13.429872 11.125478  5.702094  110.89634  -9.080785  -3.257558   3.805035
4  8.461919  7.603726  2.517150  101.95072 -14.106201  -7.147220   6.413854
5  2.531392  6.657956 10.659771  105.14495 -12.931932  -7.666588   5.337361
6  3.025244 15.909787  4.676275   95.20185 -14.939280  -2.391788   7.996481
  median.cc5 median.cc6 median.cc7 median.cc8 median.cc9 median.cc10
1  -3.633554   2.589859  2.4490654 -8.2694605 -1.2132464  -13.542157
2  -6.285458  -1.638995  2.3521451 -5.9505438  1.5506542  -11.107731
3  -5.598541   1.339909  2.3398548 -4.7241597 -2.5715766  -12.488231
4  -7.359406   1.599963 -0.6494207  0.5066077 -0.8671164   -1.217075
5  -8.101284   4.025589  3.0080046  1.8971890  2.1193144   -4.734557
6 -10.984953   4.393810 -0.8535795 -1.4618650  2.6501936   -2.338702
  median.cc11 median.cc12 median.cc13 median.cc14 median.cc15 median.cc16
1  3.15206419   1.3145897  -1.1204982   3.8116687   1.0065652  -5.5729624
2 -0.83345023  -2.9185975   1.3527322   2.2873534  -3.0080424  -2.1224897
3  2.55973554   1.6729575   0.5938637   3.2630734   0.8256174  -4.6850967
4  1.62536392  -0.5555682   1.3737687  -0.8332135   0.8025779   2.8640700
5 -2.52952403  -2.6837353  -4.0811671  -0.4724871   2.1186627   0.6013044
6 -0.09845667  -0.8647434   1.0296915  -0.6900702   2.0542665   0.2010110
  median.cc17 median.cc18 median.cc19 median.cc20 median.cc21 median.cc22
1  2.50503890 -1.11639762   5.7759344  2.32512516  -0.8540258   1.4935067
2 -2.84357434 -1.37221173   3.2727356 -4.39882963   0.4547581   0.5207376
3 -0.07064844 -0.02392908   2.9201578  2.67885817  -2.0384039   0.9258723
4  1.50004136 -1.77393307  -0.9454727  0.88169224   1.3835542   0.5904333
5  0.44249953 -2.00572468   1.1993185  0.26393591  -2.0949872  -1.0577768
6 -1.22595819 -1.55498880  -2.0707686 -0.08681687  -1.7115016   0.1864383
  median.cc23 median.cc24 median.cc25  mean.cc1   mean.cc2  mean.cc3 mean.cc4
1  -0.4861154  2.04273279  -0.9122798 113.19955  -7.939177 -3.199266 4.120387
2   0.5404949 -0.05337164  -1.3325321 114.89566  -8.219827 -3.959138 4.681245
3   2.0664991  3.67950393  -3.2870709 110.12377  -8.559412 -3.285924 2.786486
4   2.1191358  0.34554833  -3.2740412 101.39783 -12.761469 -8.295904 5.481266
5  -2.3613264 -4.73813610   1.0474525 104.62673 -10.888433 -9.114482 5.601466
6  -0.6542713 -0.49587190  -1.1304126  94.15262 -14.153380 -3.537447 7.814291
    mean.cc5 mean.cc6   mean.cc7   mean.cc8   mean.cc9  mean.cc10  mean.cc11
1  -4.726259 4.207452 -0.8553604 -4.7982098 -2.3751679 -11.264607  3.0985564
2  -5.155946 2.289969 -3.0194127 -2.2512726  0.2386140  -6.722905  2.6382179
3  -4.341298 5.013151 -1.9808976 -3.3131405 -2.4616726 -10.705971  2.8894462
4  -6.176140 1.670929 -1.1332517  0.8320822 -0.6255065  -1.968889  1.9550448
5  -6.799643 1.911823  0.8254871  1.6543395  2.2464023  -4.618549 -2.8079092
6 -10.258582 4.532534 -0.9876238 -1.2827938  3.2104720  -3.048860 -0.6069294
   mean.cc12  mean.cc13   mean.cc14   mean.cc15  mean.cc16  mean.cc17
1 -0.4467126 -0.7657920  4.60452555  0.94235472 -2.3514493  0.2318763
2 -1.8833857 -0.3242044  2.00343329 -3.18169905  1.8427058 -1.6761584
3  0.9581023  0.3452297  4.57264959  0.60290513 -3.1267562 -0.5234875
4 -0.4003499  0.1558010 -0.96642218 -0.01982832  2.4284422  2.2653495
5 -2.4730017 -3.9486621  0.09665821  2.75462837  3.4770352 -0.8511870
6 -0.8157985 -0.4197169 -0.76869945  1.48406544 -0.3714472 -1.0090512
   mean.cc18 mean.cc19    mean.cc20  mean.cc21  mean.cc22  mean.cc23  mean.cc24
1 -0.6671743  7.997967  0.668789607 -0.6415378  2.0087210  0.3851994  3.9315266
2  1.1926889  5.273383 -3.197205485  0.2261854  0.1752804  0.4480020  0.8498350
3  0.1628125  4.781565  1.451355441 -0.6183360  0.3812597  1.8577396  2.7927463
4 -0.3583433 -2.195724  0.626388383  1.6219077 -0.4445460  2.1273127  0.7963044
5 -1.6113646  1.505541  0.355868834 -2.5401335 -1.4527925 -2.0170651 -3.1495878
6 -1.3598896 -2.367155 -0.007740216 -0.4077784  0.3242966 -1.7722795  0.2038126
  mean.cc25  var.cc1   var.cc2  var.cc3   var.cc4  var.cc5   var.cc6   var.cc7
1 -2.438220 39.21008  2.070953 10.07102 25.004330 41.41051 134.29757 228.44671
2 -1.543861 23.34247  2.294833 12.78865 25.558422 56.85797 163.65316 179.51730
3 -3.060039 20.81667  3.115623 13.07580 19.582237 49.02256 140.81817 167.74917
4 -3.234697 21.60639 13.116291 16.49137 22.494334 12.94459  52.92598  42.63822
5  1.726908 23.09798 15.123558 17.46103 12.056544 20.28798  49.01745  52.35854
6 -1.149354 27.49950  3.309704 20.90734  7.756721 16.30287  27.77845  29.34361
    var.cc8   var.cc9  var.cc10 var.cc11  var.cc12 var.cc13 var.cc14  var.cc15
1 94.908434 76.386035 138.39633 83.03398 29.876386 21.57676 39.05402 30.056266
2 82.123954 61.240740 181.52430 58.16833 29.658785 21.57489 28.80127 42.164783
3 80.701395 32.189461 205.12173 65.05734 25.149615 37.30307 24.73257 37.962457
4 11.675368 16.238239  32.51568 43.10345 11.828904 15.75580 14.39072 24.312511
5  4.775292 17.076494  36.21512 13.79523  9.208385 19.95035 15.69836 26.747861
6  4.570056  7.128759  19.23308 10.14763 10.452876 14.51532 19.90096  7.978399
   var.cc16  var.cc17  var.cc18 var.cc19 var.cc20  var.cc21  var.cc22  var.cc23
1 119.35358 31.505159 69.265636 98.45217 50.92907 36.102691  7.272967 29.096157
2 102.13704 34.910110 78.128544 95.17125 68.79282 33.957072  5.785868 72.260874
3  97.00508 23.139221 45.457159 33.21711 37.26710 20.750502 10.269237 41.433950
4  18.70611  8.501661 17.012997 22.01938 20.98573 12.098514 11.289852  7.982322
5  52.64480 19.099041  9.395019 22.89027 21.27622  7.577858 11.118885  9.185258
6   7.88226  7.199381 12.645376 48.63872 15.44240 35.126401  8.665264 20.369185
  var.cc24 var.cc25   skew.cc1   skew.cc2   skew.cc3    skew.cc4   skew.cc5
1 62.46642 47.20023 -0.7388222  0.1819517 -0.8424626  0.23234270 -0.4087082
2 30.86495 59.57412 -0.7535361 -0.3274096 -0.9442204 -0.38514803  0.2554274
3 22.56075 26.77044 -0.6225267  0.6398787 -0.7071045 -0.14396567  0.3246500
4 12.78288 11.84562 -1.1335045  0.2978414 -0.5034189  0.07279951  0.8441109
5 14.86880 18.09226 -0.6548490  0.3913148 -0.3977141 -0.09548085  1.0793999
6 40.01337 30.04012 -0.7358763  0.7887711 -0.3331404 -0.69191425  1.6002095
     skew.cc6    skew.cc7   skew.cc8    skew.cc9   skew.cc10   skew.cc11
1 -0.01866101 -0.48835920  0.5570190 -0.63056303  0.11565166  0.38681448
2  0.06672828 -0.41338496  0.1241709 -0.20821166  0.13807461  0.14431112
3  0.23289147 -0.44606038  0.5302892 -0.19724554 -0.12690372  0.20297102
4 -0.48436397 -0.84477731  0.2954321  0.08363398 -0.47475280 -0.07805675
5 -0.44185547 -1.45338601 -1.1802099 -0.02441273 -0.09122774  0.01841604
6  0.05700990 -0.04840729  0.3166589  1.06892450 -1.57191096 -0.34711631
   skew.cc12  skew.cc13    skew.cc14   skew.cc15  skew.cc16   skew.cc17
1 -0.6142467 -0.1484506 -0.106445587  0.12486365  1.3666383 -0.50660097
2 -0.3259585 -0.2312339 -0.164461259 -0.40171343  1.4062080 -0.14329520
3  0.1414025  0.3704042  0.365027997  0.05501897  0.7874996 -0.83632345
4 -0.1383504 -0.4263072 -0.054756497 -0.27919823 -0.6084099  0.25334818
5  0.2636373 -0.1238036  0.007103377  0.13446054  1.2686720 -0.46283989
6  0.2547037 -1.2169558 -0.397347656 -1.14544704 -0.4091171  0.05847849
   skew.cc18   skew.cc19  skew.cc20   skew.cc21  skew.cc22  skew.cc23
1  0.5491275 -0.03979579 -1.0299131 -0.52011909  0.3048525  0.3693062
2  0.7547712  0.36759686  0.2689195 -0.10428438 -0.8072175 -0.2294949
3 -0.1299190  0.55031159 -0.2687133  0.63878056 -0.2950719 -0.4327213
4  0.4633078 -0.38943000  0.4711683  0.04842276 -0.3781934  0.8276710
5  0.2083102  0.26525228  0.1881902 -0.48154680 -0.2072295 -0.4325777
6  0.4068986 -1.46726807  1.0378404  0.86600536 -0.3745826 -1.2351570
    skew.cc24  skew.cc25 kurt.cc1 kurt.cc2 kurt.cc3 kurt.cc4 kurt.cc5 kurt.cc6
1  0.07460141 -0.5224114 3.692373 1.438470 3.685870 1.542584 2.026494 1.267189
2 -0.48588119  0.3592784 2.807812 2.035873 3.785911 2.017039 1.748489 1.326794
3 -0.32218991 -0.3133332 1.982351 1.938390 3.061307 1.581973 1.774037 1.374422
4  0.39146058  0.1716544 3.444364 1.373735 1.833495 1.266572 2.189092 2.126287
5  1.49431039  0.7216276 2.319423 1.228036 1.258907 2.209629 3.188262 1.574108
6  1.20879138 -1.2868775 2.330985 2.014690 1.543509 2.685203 4.488608 1.207101
  kurt.cc7 kurt.cc8 kurt.cc9 kurt.cc10 kurt.cc11 kurt.cc12 kurt.cc13 kurt.cc14
1 1.575220 1.693552 2.661247  1.220348  1.759860  2.075862  2.770308  1.749640
2 1.566243 1.346922 1.940861  1.948459  1.161452  2.587980  1.400122  1.721571
3 1.719963 2.034883 2.672801  1.588426  1.982298  2.009586  2.899741  1.784707
4 2.962703 2.676028 1.299919  2.651348  1.538738  1.274102  1.499599  1.413677
5 3.813506 3.867286 1.843679  3.033589  1.684377  1.484912  2.036914  1.822548
6 1.770796 1.924167 2.951370  4.853628  1.966645  1.841446  3.301255  1.720128
  kurt.cc15 kurt.cc16 kurt.cc17 kurt.cc18 kurt.cc19 kurt.cc20 kurt.cc21
1  1.291308  3.581792  1.795662  3.011537  1.783469  3.140739  2.786548
2  2.342942  3.744191  1.669686  2.695255  1.504540  1.806701  1.935296
3  2.125656  2.501337  3.783112  1.992832  1.983839  1.977878  2.070000
4  1.912687  2.662871  1.319669  1.885780  1.523207  2.189645  1.437228
5  1.473286  3.516086  1.753017  2.490501  1.545868  1.560605  1.676822
6  3.296963  1.413143  1.830883  1.621089  4.502698  3.455573  2.576168
  kurt.cc22 kurt.cc23 kurt.cc24 kurt.cc25 mean.d1.cc var.d1.cc mean.d2.cc
1  1.698707  1.750416  1.860362  2.185622  -180.0812  149674.3   2575.527
2  2.680944  2.145128  2.265519  2.407302  -182.5251  155809.8   2665.290
3  2.403744  2.704935  2.349213  2.172382  -175.9519  140683.8   2501.807
4  1.830708  2.934473  2.107674  1.589294  -160.5609  118844.1   2321.431
5  1.761313  2.417847  4.319930  2.391357  -160.9951  127833.3   2566.415
6  3.241118  3.767870  4.239549  3.974242  -148.0187  102672.1   2228.953
  var.d2.cc
1  17080568
2  17909354
3  16438780
4  14648211
5  14220803
6  12182912
> 
> 
> 
> cleanEx()
> nameEx("move_images")
> ### * move_images
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: move_images
> ### Title: Move/copy image files between directories
> ### Aliases: move_images
> 
> ### ** Examples
> 
> {
+   # load data
+   data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+   writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+ 
+   # create spectrograms
+   spectrograms(lbh_selec_table[1:5, ], path = tempdir(), pb = FALSE)
+ 
+   # create folder to move image files
+   dir.create(file.path(tempdir(), "imgs"))
+ 
+   # copy files
+   move_images(cut = FALSE, from = tempdir(), to = file.path(tempdir(), "imgs"))
+ 
+   # cut files
+   move_images(
+     cut = TRUE, from = tempdir(),
+     to = file.path(tempdir(), "imgs"), overwrite = TRUE
+   )
+ 
+   # Check this folder
+   file.path(tempdir(), "imgs")
+ }
[1] "/tmp/RtmpOHyMGh/imgs"
> 
> 
> 
> 
> cleanEx()
> nameEx("mp32wav")
> ### * mp32wav
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mp32wav
> ### Title: Convert .mp3 files to .wav
> ### Aliases: mp32wav
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # download mp3 files from xeno-canto
> ##D query_xc(qword = "Phaethornis aethopygus", download = TRUE, path = tempdir())
> ##D 
> ##D # Convert all files to .wav format
> ##D mp32wav(path = tempdir(), dest.path = tempdir())
> ##D 
> ##D # check this folder!!
> ##D tempdir()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("multi_DTW")
> ### * multi_DTW
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: multi_DTW
> ### Title: A wrapper on 'dtwDist' for comparing multivariate contours
> ### Aliases: multi_DTW
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # load data
> ##D data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
> ##D 
> ##D writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav")) # save sound files
> ##D writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
> ##D writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
> ##D writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
> ##D 
> ##D # measure
> ##D df <- freq_ts(X = lbh_selec_table, threshold = 10, img = FALSE, path = tempdir())
> ##D se <- freq_ts(X = lbh_selec_table, threshold = 10, img = FALSE, path = tempdir(), type = "entropy")
> ##D 
> ##D # run function
> ##D multi_DTW(df, se)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("open_wd")
> ### * open_wd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: open_wd
> ### Title: Open working directory
> ### Aliases: open_wd
> 
> ### ** Examples
> 
> {
+ }
NULL
> 
> 
> 
> 
> cleanEx()
> nameEx("overlapping_sels")
> ### * overlapping_sels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: overlapping_sels
> ### Title: Find overlapping selections
> ### Aliases: overlapping_sels
> 
> ### ** Examples
> 
> {
+   # no overlap
+   overlapping_sels(X = lbh_selec_table)
+ 
+   # modified lbh_selec_table to make the first and second selection overlap
+   Y <- lbh_selec_table
+   Y$end[4] <- 1.5
+ 
+   overlapping_sels(X = Y)
+ 
+   # drop overlapping
+   overlapping_sels(X = Y, drop = TRUE)
+ 
+   # get index instead
+   overlapping_sels(X = Y, index = TRUE)
+ }
No overlapping selections were found
2 selections overlapped
2 selections overlapped, 1 were removed
[1] 4 5
> 
> 
> 
> cleanEx()
> nameEx("phylo_spectro")
> ### * phylo_spectro
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: phylo_spectro
> ### Title: Add spectrograms onto phylogenetic trees
> ### Aliases: phylo_spectro
> 
> ### ** Examples
> 
> { 
+ }
NULL
> 
> 
> 
> cleanEx()
> nameEx("plot_coordination")
> ### * plot_coordination
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_coordination
> ### Title: Coordinated singing graphs
> ### Aliases: plot_coordination
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # load simulate singing events (see data documentation)
> ##D data(sim_coor_sing)
> ##D 
> ##D #' # make plot_coordination in graphic device format
> ##D cgs <- plot_coordination(X = sim_coor_sing, ovlp = TRUE, only.coor = FALSE, img = FALSE)
> ##D 
> ##D cgs
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("query_xc")
> ### * query_xc
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: query_xc
> ### Title: Access 'Xeno-Canto' recordings and metadata
> ### Aliases: query_xc
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # search without downloading
> ##D df1 <- query_xc(qword = "Phaethornis anthophilus", download = FALSE)
> ##D View(df1)
> ##D 
> ##D # downloading files
> ##D query_xc(qword = "Phaethornis anthophilus", download = TRUE, path = tempdir())
> ##D 
> ##D # check this folder
> ##D tempdir()
> ##D 
> ##D ## search using xeno-canto advance query ###
> ##D orth.pap <- query_xc(qword = "gen:orthonyx cnt:papua loc:tari", download = FALSE)
> ##D 
> ##D # download file using the output data frame as input
> ##D query_xc(X = orth.pap, path = tempdir())
> ##D 
> ##D # use quotes for queries with more than 1 word (e.g. Costa Rica),note that the
> ##D # single quotes are used for the whole 'qword' and double quotes for the 2-word term inside
> ##D # Phaeochroa genus in Costa Rica
> ##D phae.cr <- query_xc(qword = 'gen:phaeochroa cnt:"costa rica"', download = FALSE)
> ##D 
> ##D # several terms can be searched for in the same field
> ##D # search for all female songs in sound type
> ##D femsong <- query_xc(qword = "type:song type:female", download = FALSE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("read_sound_file")
> ### * read_sound_file
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_sound_file
> ### Title: An extended version of read_wave that reads several sound file
> ###   formats and files from selection tables
> ### Aliases: read_sound_file
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # write wave files with lower case file extension
> ##D data(list = c("Phae.long1"))
> ##D writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
> ##D 
> ##D # read from selection table
> ##D read_sound_file(X = lbh_selec_table, index = 1, path = tempdir())
> ##D 
> ##D # from extended selection table
> ##D library(NatureSounds)
> ##D read_sound_file(X = lbh.est, index = 1)
> ##D 
> ##D # read from selection table
> ##D read_sound_file(X = lbh_selec_table, index = 1, path = tempdir())
> ##D 
> ##D # read WAV
> ##D filepath <- system.file("extdata", "recording.wav", package = "bioacoustics")
> ##D read_sound_file(filepath)
> ##D 
> ##D # read MP3
> ##D filepath <- system.file("extdata", "recording.mp3", package = "bioacoustics")
> ##D read_sound_file(filepath)
> ##D 
> ##D # read WAC
> ##D filepath <- system.file("extdata", "recording_20170716_230503.wac", package = "bioacoustics")
> ##D read_sound_file(filepath, from = 0, to = 0.2)
> ##D 
> ##D # URL file
> ##D read_sound_file(X = "https://www.xeno-canto.org/513948/download")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("read_wave")
> ### * read_wave
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: read_wave
> ### Title: A wrapper for tuneR's readWave that read sound files listed
> ###   within selection tables
> ### Aliases: read_wave
> 
> ### ** Examples
> 
> {
+   # write wave files with lower case file extension
+   data(list = c("Phae.long1"))
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+ 
+   # read from selection table
+   read_wave(X = lbh_selec_table, index = 1, path = tempdir())
+ 
+   # from extended selection table
+   library(NatureSounds)
+   read_wave(X = lbh.est, index = 1)
+ 
+   # read WAV
+   filepath <- system.file("extdata", "recording.wav", package = "bioacoustics")
+   read_wave(filepath)
+ 
+   # read MP3
+   filepath <- system.file("extdata", "recording.mp3", package = "bioacoustics")
+   read_wave(filepath)
+ 
+   # URL file
+   read_wave(X = "https://www.xeno-canto.org/513948/download")
+ }

Wave Object
	Number of Samples:      274176
	Duration (seconds):     6.22
	Samplingrate (Hertz):   44100
	Channels (Mono/Stereo): Mono
	PCM (integer format):   TRUE
	Bit (8/16/24/32/64):    16 

> 
> 
> 
> 
> cleanEx()
> nameEx("remove_channels")
> ### * remove_channels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: remove_channels
> ### Title: Remove channels in wave files
> ### Aliases: remove_channels
> 
> ### ** Examples
> 
> {
+ # save sound file examples
+ data("Phae.long1")
+ Phae.long1.2 <- stereo(Phae.long1, Phae.long1)
+ 
+ writeWave(Phae.long1.2, file.path(tempdir(), "Phae.long1.2.wav"))
+ 
+ remove_channels(channels = 1, path = tempdir())
+ 
+ #check this floder
+ tempdir()
+ }
[1] "/tmp/RtmpOHyMGh"
> 
> 
> 
> 
> cleanEx()
> nameEx("remove_silence")
> ### * remove_silence
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: remove_silence
> ### Title: Remove silence in wave files
> ### Aliases: remove_silence
> 
> ### ** Examples
> 
> {
+ # save sound file examples
+ data(list = c("Phae.long1", "Phae.long2","lbh_selec_table"))
+ sil <- silence(samp.rate = 22500, duration = 3, xunit = "time")
+ 
+ 
+ wv1 <- pastew(pastew(Phae.long1, sil, f = 22500, output = "Wave"),
+ Phae.long2, f = 22500, output = "Wave")
+ 
+ #check silence in between amplitude peaks
+ env(wv1)
+ 
+  #save wave file
+  writeWave(object = wv1, filename = file.path(tempdir(), "wv1.wav"),
+   extensible = FALSE)
+ 
+ #remove silence
+ # remove_silence(files = "wv1.wav", pb = FALSE, path = tempdir())
+ 
+ #check this floder
+ tempdir()
+ }
[1] "/tmp/RtmpOHyMGh"
> 
> 
> 
> 
> cleanEx()
> nameEx("rename_est_waves")
> ### * rename_est_waves
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rename_est_waves
> ### Title: Rename wave objects and associated metadata in extended
> ###   selection tables
> ### Aliases: rename_est_waves
> 
> ### ** Examples
> 
> {
+ data("lbh.est")
+ 
+ # order by sound file name
+ lbh.est <- lbh.est[order(lbh.est$sound.files),]
+ 
+ # create new sound file name
+ nsf <- sapply(strsplit(lbh.est$sound.files, ".wav",fixed = TRUE), "[",1)
+ 
+ slc <- vector(length = nrow(lbh.est))
+ slc[1] <- 1
+ 
+ for(i in 2:length(slc))
+ if (nsf[i - 1] == nsf[i]) slc[i] <- slc[i - 1] + 1 else
+ slc[i] <- 1
+ 
+ nsf <- paste(nsf, slc, sep = "_")
+ 
+ # rename sound files
+ Y <- rename_est_waves(X = lbh.est, new.sound.files = nsf)
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("resample_est")
> ### * resample_est
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: resample_est
> ### Title: Resample wave objects in a extended selection table
> ### Aliases: resample_est
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "selec_table"))
> ##D writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
> ##D writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
> ##D writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
> ##D writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
> ##D 
> ##D # create extended selection table
> ##D X <- selection_table(
> ##D   X = lbh_selec_table, extended = TRUE, confirm.extended = FALSE, pb = FALSE,
> ##D   path = tempdir()
> ##D )
> ##D 
> ##D # resample
> ##D Y <- resample_est(X)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("selection_table")
> ### * selection_table
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: selection_table
> ### Title: Create 'selection_table' and 'extended_selection_table' objects
> ### Aliases: selection_table
> 
> ### ** Examples
> 
> {
+   data(list = c(
+     "Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4",
+     "lbh_selec_table"
+   ))
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+   writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+   writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+   writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
+ 
+   # make selection table
+   st <- selection_table(X = lbh_selec_table, path = tempdir())
+ 
+   is_selection_table(st)
+ 
+   #' # make extended selection table
+   st <- selection_table(
+     X = lbh_selec_table, extended = TRUE,
+     path = tempdir()
+   )
+ 
+   is_extended_selection_table(st)
+ 
+   ### make extended selection by song
+   # create a song variable
+   lbh_selec_table$song <- as.numeric(as.factor(lbh_selec_table$sound.files))
+ 
+   st <- selection_table(
+     X = lbh_selec_table, extended = TRUE,
+     by.song = "song", path = tempdir()
+   )
+ }
checking selections (step 1 of 1):
checking selections (step 1 of 2):
saving wave objects into extended selection table (step 2 of 2):
checking selections (step 1 of 2):
saving wave objects into extended selection table (step 2 of 2):
> 
> 
> 
> 
> cleanEx()
> nameEx("sig2noise")
> ### * sig2noise
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sig2noise
> ### Title: Measure signal-to-noise ratio
> ### Aliases: sig2noise
> 
> ### ** Examples
> 
> {
+   data(list = c("Phae.long1", "lbh_selec_table"))
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav")) # save sound files
+ 
+   # specifying the correct margin is important
+   # use snr_spectrograms to troubleshoot margins for sound files
+   sig2noise(lbh_selec_table[grep("Phae.long1", lbh_selec_table$sound.files), ],
+     mar = 0.2,
+     path = tempdir()
+   )
+ 
+   # this smaller margin doesn't overlap neighboring signals
+   sig2noise(lbh_selec_table[grep("Phae.long1", lbh_selec_table$sound.files), ],
+     mar = 0.1,
+     path = tempdir()
+   )
+ }
     sound.files channel selec     start       end bottom.freq top.freq
1 Phae.long1.wav       1     1 1.1693549 1.3423884    2.220105 8.604378
2 Phae.long1.wav       1     2 2.1584085 2.3214565    2.169437 8.807053
3 Phae.long1.wav       1     3 0.3433366 0.5182553    2.218294 8.756604
       SNR
1 23.55816
2 22.81263
3 21.12933
> 
> 
> 
> 
> cleanEx()
> nameEx("simulate_songs")
> ### * simulate_songs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simulate_songs
> ### Title: Simulate animal vocalizations
> ### Aliases: simulate_songs
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # simulate a song with 3 elements and no harmonics
> ##D sm_sng <- simulate_songs(n = 3, harms = 1)
> ##D 
> ##D # plot spectro
> ##D seewave::spectro(sm_sng)
> ##D 
> ##D # simulate a song with 5 elements and 2 extra harmonics
> ##D sm_sng2 <- simulate_songs(n = 5, harms = 3)
> ##D 
> ##D # plot spectrogram
> ##D seewave::spectro(sm_sng2)
> ##D 
> ##D # six pure tones with frequency ranging form 4 to 6 and returning selection table
> ##D sm_sng <- simulate_songs(
> ##D   n = 6, harms = 1, seed = 1, diff.fun = "pure.tone",
> ##D   freqs = seq(4, 6, length.out = 6), selec.table = TRUE,
> ##D   path = tempdir()
> ##D )
> ##D 
> ##D # plot spectro
> ##D seewave::spectro(sm_sng$wave, flim = c(2, 8))
> ##D 
> ##D # selection table
> ##D sm_sng$selec.table
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("snr_spectrograms")
> ### * snr_spectrograms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: snr_spectrograms
> ### Title: Spectrograms with background noise margins
> ### Aliases: snr_spectrograms
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(list = c("Phae.long1", "Phae.long2", "lbh_selec_table"))
> ##D writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav")) # save sound.files
> ##D writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
> ##D 
> ##D # make Phae.long1 and Phae.long2 spectrograms
> ##D # snrmar needs to be smaller before moving on to sig2noise()
> ##D 
> ##D snr_spectrograms(lbh_selec_table,
> ##D   flim = c(0, 14), inner.mar = c(4, 4.5, 2, 1),
> ##D   outer.mar = c(4, 2, 2, 1), picsize = 2, res = 300, cexlab = 2, mar = 0.2,
> ##D   snrmar = 0.1, it = "jpeg", wl = 300, path = tempdir()
> ##D )
> ##D 
> ##D # make only Phae.long1 spectrograms
> ##D # snrmar now doesn't overlap neighboring signals
> ##D 
> ##D snr_spectrograms(lbh_selec_table[grepl(c("Phae.long1"), lbh_selec_table$sound.files), ],
> ##D   flim = c(3, 14), inner.mar = c(4, 4.5, 2, 1), outer.mar = c(4, 2, 2, 1),
> ##D   picsize = 2, res = 300, cexlab = 2, mar = 0.2, snrmar = 0.01, wl = 300,
> ##D   path = tempdir()
> ##D )
> ##D 
> ##D # check this folder!
> ##D tempdir()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("song_analysis")
> ### * song_analysis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: song_analysis
> ### Title: Calculates acoustic parameters at the song level
> ### Aliases: song_analysis
> 
> ### ** Examples
> 
> {
+ # get warbleR sound file examples
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
+ writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+ writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+ writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+ 
+ # add a 'song' column
+ lbh_selec_table$song <- c("song1", "song1", "song1", "song2",
+   "song2", "song3", "song3", "song3", "song4", "song4", "song4")
+ 
+ # measure acoustic parameters
+ sp <- spectro_analysis(lbh_selec_table[1:8, ], bp = c(1, 11), 300, fast = TRUE, path = tempdir())
+ 
+ # add song data
+ sp <- merge(sp, lbh_selec_table[1:8, ], by = c("sound.files", "selec"))
+ 
+ # caculate song-level parameters for all numeric parameters
+ song_analysis(X = sp, song_colm = "song", parallel = 1, pb = TRUE)
+ 
+ # caculate song-level parameters selecting parameters with mean_colm
+ song_analysis(X = sp, song_colm = "song",mean_colm = c("dfrange", "duration"),
+  parallel = 1, pb = TRUE)
+ 
+ # caculate song-level parameters for selecting parameters with mean_colm, max_colm
+ # and min_colm and weighted by duration
+ song_analysis(X = sp, weight = "duration", song_colm = "song",
+ mean_colm =  c("dfrange", "duration"), min_colm =  "mindom", max_colm = "maxdom",
+   parallel = 1, pb = TRUE)
+ 
+ # with two weights
+ song_analysis(X = sp, weight = c("duration", "dfrange"), song_colm = "song",
+ mean_colm = c("kurt", "sp.ent"), parallel = 1, pb = TRUE)
+ 
+ # with two weights no progress bar
+ song_analysis(X = sp, weight = c("duration", "dfrange"), song_colm = "song",
+ mean_colm = c("kurt", "sp.ent"), parallel = 1, pb = FALSE)
+ }
     sound.files selec     start      end top.freq bottom.freq  song     kurt
1 Phae.long1.wav     1 0.3433366 2.321457 8.807053    2.169437 song1 11.98007
2 Phae.long2.wav     1 0.1595983 1.583209 8.888027    2.284006 song2 11.60173
3 Phae.long3.wav     1 0.1233643 2.104392 9.315153    2.316862 song3  9.00069
     sp.ent num.elms elm.duration freq.range song.duration song.rate
1 0.9311127        3    0.1703334   6.637617      1.978120  1.652827
2 0.9264235        2    0.1293606   6.604022      1.423610  1.541473
3 0.9082606        3    0.1308718   6.998291      1.981028  1.620878
  gap.duration
1    0.7335599
2    1.1648893
3    0.7942062
> 
> 
> 
> 
> cleanEx()
> nameEx("sort_colms")
> ### * sort_colms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sort_colms
> ### Title: Sort columns in a more intuitive order
> ### Aliases: sort_colms
> 
> ### ** Examples
> 
> library(warbleR)
> data("selec.table")
> 
> # mess column order
> selec.table <- selec.table[, sample(seq_len(ncol(selec.table)))]
> 
> # check names
> names(selec.table)
[1] "rec.comment" "start"       "top.freq"    "sound.files" "channel"    
[6] "bottom.freq" "selec"       "sel.comment" "end"        
> 
> selec.table <- sort_colms(X = selec.table)
> 
> # check names again
> names(selec.table)
[1] "sound.files" "channel"     "selec"       "start"       "end"        
[6] "top.freq"    "bottom.freq" "rec.comment" "sel.comment"
> 
> 
> 
> 
> cleanEx()
> nameEx("sound_pressure_level")
> ### * sound_pressure_level
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sound_pressure_level
> ### Title: Measure relative sound pressure level
> ### Aliases: sound_pressure_level
> 
> ### ** Examples
> 
> {
+   data(list = c("Phae.long1", "lbh_selec_table"))
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav")) # save sound files
+ 
+   spl <- sound_pressure_level(
+     X = lbh_selec_table[grep("Phae.long1", lbh_selec_table$sound.files), ],
+     parallel = 1, pb = TRUE, path = tempdir()
+   )
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("spectro_analysis")
> ### * spectro_analysis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spectro_analysis
> ### Title: Measure acoustic parameters in batches of sound files
> ### Aliases: spectro_analysis
> 
> ### ** Examples
> 
> {
+ data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "lbh_selec_table"))
+ writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+ writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+ writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+ 
+ # measure acoustic parameters
+ sp_param <- spectro_analysis(X = lbh_selec_table[1:8,], pb = FALSE, path = tempdir())
+ 
+ # measuring peakf
+ sp_param <- spectro_analysis(X = lbh_selec_table[1:8,], pb = FALSE, fast = FALSE, path = tempdir())
+ 
+ }
> 
> 
> 
> cleanEx()
> nameEx("spectrograms")
> ### * spectrograms
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: spectrograms
> ### Title: Spectrograms of selected signals
> ### Aliases: spectrograms
> 
> ### ** Examples
> 
> {
+   # load and save data
+   data(list = c("Phae.long1", "Phae.long2", "lbh_selec_table"))
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav")) # save sound files
+   writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+ 
+   # make spectrograms
+   spectrograms(
+     X = lbh_selec_table, flim = c(0, 11), res = 300, mar = 0.05,
+     wl = 300, path = tempdir()
+   )
+ 
+   # check this folder
+   tempdir()
+ }
[1] "/tmp/RtmpOHyMGh"
> 
> 
> 
> 
> cleanEx()
> nameEx("split_sound_files")
> ### * split_sound_files
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: split_sound_files
> ### Title: Splits sound files
> ### Aliases: split_sound_files
> 
> ### ** Examples
> 
> {
+   # load data and save to temporary working directory
+   data(list = c("Phae.long1", "Phae.long2", "Phae.long3"))
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+   writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+   writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+ 
+   # split files in 1 s files
+   split_sound_files(sgmt.dur = 1, path = tempdir())
+ 
+   # Check this folder
+   tempdir()
+ }
[1] "/tmp/RtmpOHyMGh"
> 
> 
> 
> 
> cleanEx()
> nameEx("tailor_sels")
> ### * tailor_sels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tailor_sels
> ### Title: Interactive view of spectrograms to tailor selections
> ### Aliases: tailor_sels
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
> ##D writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
> ##D writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
> ##D writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
> ##D writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
> ##D 
> ##D tailor_sels(X = lbh_selec_table, flim = c(1, 12), wl = 300, auto.next = TRUE, path = tempdir())
> ##D 
> ##D # Read output .csv file
> ##D seltailor.df <- read.csv(file.path(tempdir(), "seltailor_output.csv"))
> ##D seltailor.df
> ##D 
> ##D # check this directory for .csv file after stopping function
> ##D tempdir()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("test_coordination")
> ### * test_coordination
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: test_coordination
> ### Title: Randomization test for singing coordination
> ### Aliases: test_coordination
> 
> ### ** Examples
> 
> {
+ #load  simulated singing data (see data documentation)
+ data(sim_coor_sing)
+ 
+ # set global options (this can also be set within the function call)
+ warbleR_options(iterations = 100, pb = FALSE)
+ 
+ # testing if coordination happens less than expected by chance
+ test_coordination(sim_coor_sing)
+ 
+ # testing if coordination happens more than expected by chance
+ test_coordination(sim_coor_sing, less.than.chance = FALSE)
+ 
+ # using "duration" method and "keep.song.order" as randomization procedure
+ test_coordination(sim_coor_sing, ovlp.method =  "time.overlap",
+ randomization = "keep.song.order")
+ }
  sing.event obs.ovlp mean.random.ovlp p.value coor.score
1     altern 1.098593         3.234261    0.00      -0.66
2       ovlp 5.991010         3.651997    1.00       0.64
3    uncoord 3.097526         3.225044    0.35      -0.04
> 
> 
> 
> 
> cleanEx()
> nameEx("track_freq_contour")
> ### * track_freq_contour
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: track_freq_contour
> ### Title: Spectrograms with frequency measurements
> ### Aliases: track_freq_contour
> 
> ### ** Examples
> 
> {
+   # load data
+   data("Cryp.soui")
+   writeWave(Cryp.soui, file.path(tempdir(), "Cryp.soui.wav")) # save sound files
+ 
+   # autodetec location of signals
+   ad <- auto_detec(
+     threshold = 6, bp = c(1, 3), mindur = 1.2, flim = c(0, 5),
+     maxdur = 3, img = FALSE, ssmooth = 600, wl = 300, flist = "Cryp.soui.wav",
+     path = tempdir()
+   )
+ 
+   # track dominant frequency graphs with freq range detection
+   track_freq_contour(
+     X = ad[!is.na(ad$start), ], flim = c(0, 5), ovlp = 90,
+     it = "tiff", bp = c(1, 3), contour = "df", wl = 300, frange = TRUE,
+     path = tempdir()
+   )
+ 
+   # using users frequency data (custom.contour argument)
+   # first get contours using freq_ts
+   df <- freq_ts(
+     X = ad[!is.na(ad$start), ], flim = c(0, 5), ovlp = 90, img = FALSE,
+     bp = c(1, 3), wl = 300, path = tempdir()
+   )
+ 
+   # now input the freq_ts output into track_freq_contour
+   track_freq_contour(
+     X = ad[!is.na(ad$start), ], custom.contour = df, flim = c(0, 5), ovlp = 90,
+     it = "tiff", path = tempdir()
+   )
+ 
+   # Check this folder
+   tempdir()
+ 
+   # track both frequencies
+   track_freq_contour(
+     X = ad[!is.na(ad$start), ], flim = c(0, 5), ovlp = 90,
+     it = "tiff", bp = c(1, 3), contour = "both", wl = 300, path = tempdir()
+   )
+ }
Warning: This function will be deprecated in future warbleR versions, please look at the ohun package for automatic signal detection functions (https://marce10.github.io/ohun/index.html)
Warning: 'img' has been deprecated. Use full_spectrograms() to create images from auto_detec() output
Warning: 'flim' has been deprecated. Use full_spectrograms() to create images from auto_detec() output
NULL
> 
> 
> 
> 
> cleanEx()
> nameEx("try_na")
> ### * try_na
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: try_na
> ### Title: Wrapper for "try" function
> ### Aliases: try_na
> 
> ### ** Examples
> 
> {
+ # try a function that does not exists to produce an error
+ try_na(crazy78(12))
+ 
+ # try a real function (no error)
+ try_na(mean(1:5))
+ }
[1] 3
> 
> 
> 
> 
> cleanEx()
> nameEx("tweak_spectro")
> ### * tweak_spectro
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tweak_spectro
> ### Title: Plot a mosaic of spectrograms with varying display parameters
> ### Aliases: tweak_spectro
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Save to temporary working directory
> ##D 
> ##D # save sound file examples
> ##D data(list = c("Phae.long1", "lbh_selec_table"))
> ##D writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav")) 
> ##D 
> ##D # variable collevels
> ##D tweak_spectro(X = lbh_selec_table, wl = 164, ovlp = c(90), wn = c("flattop"), 
> ##D length.out = 16, nrow = 4, ncol = 4, width = 20, height = 11.3, rm.axes = TRUE, 
> ##D cex = 1, box = F, collev.min = c(-20, -150), path = tempdir(), flim = c(0, 10))
> ##D 
> ##D # variable overlap and wn
> ##D tweak_spectro(X = lbh_selec_table, wl = 164, ovlp = c(50, 90), 
> ##D wn = c("hanning", "hamming", "rectangle", "bartlett", "blackman", "flattop"),
> ##D length.out = 7, nrow = 6, ncol = 7, width = 20, height = 11.3, rm.axes = TRUE, 
> ##D cex = 1, box = F, path = tempdir(), flim = c(0, 10))
> ##D 
> ##D # variable wl and wn
> ##D tweak_spectro(X = lbh_selec_table, wl = c(100, 1000), ovlp = c(50, 90), wn = "all", 
> ##D length.out = 5, nrow = 10, ncol = 14, width = 20, height = 11.3, rm.axes = TRUE, 
> ##D cex = 0.7, path = tempdir(), flim = c(0, 10))
> ##D 
> ##D # variable wl, collev.min and wn 
> ##D tweak_spectro(X = lbh_selec_table, wl = c(100, 1000), ovlp = 90, 
> ##D wn = c("hanning", "hamming", "rectangle"), collev.min = c(-110, -25), 
> ##D length.out = 3, nrow = 10, ncol = 14, width = 20, height = 11.3, rm.axes = TRUE,
> ##D  cex = 0.7, path = tempdir(), flim = c(0, 10))
> ##D  
> ##D  # variable wl, wn and pal
> ##D  tweak_spectro(X = lbh_selec_table, wl = c(100, 1000), ovlp = 90, 
> ##D  wn = c("hanning", "hamming", "rectangle"), 
> ##D  pal = c("reverse.gray.colors.2", "reverse.topo.colors", 
> ##D  "reverse.terrain.colors", "reverse.cm.colors"), 
> ##D  length.out = 4, nrow = 5, ncol = 10, width = 20, height = 11.3,
> ##D   rm.axes = TRUE, cex = 0.7, lab.mar = 2, path = tempdir(), flim = c(0, 10))
> ##D   
> ##D   # wl, wn and pal
> ##D   tweak_spectro(X = lbh_selec_table, wl = c(100, 1000), ovlp = 90,
> ##D    wn = c("hanning", "hamming", "rectangle"), 
> ##D   pal = c("reverse.gray.colors.2", "reverse.topo.colors", 
> ##D   "reverse.terrain.colors", "reverse.cm.colors"), 
> ##D   length.out = 4, nrow = 5, ncol = 10, width = 20, height = 11.3, rm.axes = TRUE,
> ##D    cex = 0.7, group.tag = "wn",  spec.mar = 0.4, lab.mar = 0.8, box = FALSE, 
> ##D    tag.pal = list(reverse.cm.colors), path = tempdir(), flim = c(0, 10))
> ##D 
> ##D check this floder
> ##D tempdir()
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("warbleR_options")
> ### * warbleR_options
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: warbleR_options
> ### Title: Setting warbleR options
> ### Aliases: warbleR_options
> 
> ### ** Examples
> 
> {
+   # load data and save in temporary working directory
+   data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4", "lbh_selec_table"))
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+   writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+   writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
+   writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
+ 
+   # sig2noise with progress bar (by default is TRUE)
+   a <- sig2noise(X = lbh_selec_table, mar = 0.1, path = tempdir())
+ 
+   # set progress bar to FALSE with warbleR_options
+   warbleR_options(pb = FALSE, path = tempdir())
+ 
+   # sig2noise without progress bar
+   a <- sig2noise(X = lbh_selec_table, mar = 0.1)
+ 
+   # sig2noise with progress bar by setting it within the function call (overwritting options)
+   a <- sig2noise(X = lbh_selec_table, pb = TRUE, mar = 0.1)
+ 
+   # sig2noise without progress bar using warbleR_options setting again
+   a <- sig2noise(X = lbh_selec_table, mar = 0.1)
+ }
> 
> 
> 
> cleanEx()
> nameEx("wav_2_flac")
> ### * wav_2_flac
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wav_2_flac
> ### Title: Convert .wav files to .flac
> ### Aliases: wav_2_flac
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # create some .wav files
> ##D data(list = c("Phae.long1", "Phae.long2", "Phae.long3", "Phae.long4"))
> ##D writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
> ##D writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
> ##D writeWave(Phae.long3, file.path(tempdir(), "Phae.long3.wav"))
> ##D writeWave(Phae.long4, file.path(tempdir(), "Phae.long4.wav"))
> ##D 
> ##D # Convert all files to .flac format
> ##D wav_2_flac(path = tempdir())
> ##D 
> ##D # check this folder!!
> ##D open_wd(tempdir())
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("wpd_features")
> ### * wpd_features
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wpd_features
> ### Title: Measure wavelet packet decomposition features (EXPERIMENTAL)
> ### Aliases: wpd_features
> 
> ### ** Examples
> 
> {
+   data(list = c("Phae.long1", "Phae.long2", "lbh_selec_table"))
+   writeWave(Phae.long1, file.path(tempdir(), "Phae.long1.wav"))
+   writeWave(Phae.long2, file.path(tempdir(), "Phae.long2.wav"))
+ 
+   # not normalize
+   wpd_features(lbh_selec_table[1:5, ], threshold2 = 0.3, nor = FALSE, path = tempdir())
+ }
     sound.files selec max.energy position    spread width
1 Phae.long1.wav     1 3819085942     3413 0.5333922    18
2 Phae.long1.wav     2 4566803930     3371 0.5617731    15
3 Phae.long1.wav     3 1710652669     3332 4.4784859    31
4 Phae.long2.wav     1  123488775     3872 1.0150520   125
5 Phae.long2.wav     2  347589172     3364 1.2633529    41
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  11.173 0.136 13.036 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
